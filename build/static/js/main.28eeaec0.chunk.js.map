{"version":3,"sources":["Header.js","About.js","Projects.js","Resume.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["headers","Header","fixedToTop","Group","Heading","align","Alignment","RIGHT","map","item","href","className","About","id","interactive","elevation","Elevation","TWO","src","alt","mapProjecTags","tags","tag","i","round","intent","key","Project","style","fontSize","textAlign","Projects","proj","title","text","rightIcon","link","target","description","mapDescription","list","split","Resume","Jobs","job","company","year","Contact","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28eeaec0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Alignment } from \"@blueprintjs/core\";\r\n\r\nconst headers = [\"About\", \"Resume\", \"Projects\", \"Contact\"];\r\n\r\nconst mapHeader = (data) => {\r\n    return data.map(item => (\r\n        <a href={'#'+item} className={\"headers\"}>{item}</a>\r\n    ));\r\n}\r\n\r\nfunction Header() {\r\n    return (\r\n        <Navbar fixedToTop>\r\n            <Navbar.Group >\r\n                <Navbar.Heading>Cassidy Linhares</Navbar.Heading> \r\n            </Navbar.Group>\r\n           \r\n            <Navbar.Group align={Alignment.RIGHT}>\r\n                {mapHeader(headers)}\r\n            </Navbar.Group>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Card, Elevation } from '@blueprintjs/core';\r\n\r\nfunction About() {\r\n    return (\r\n        <div id=\"About\" >\r\n            <Card interactive elevation={Elevation.TWO} className=\"flexItem\" >\r\n                <img src={\"/bitmoji.png\"}  alt=\"Me\"/>\r\n                <h4 className=\"bp3-heading\">Cassidy Linhares</h4>\r\n                <h6 className=\"bp3-heading\">Software Engineer</h6>  \r\n            </Card>\r\n            <Card elevation={Elevation.TWO} className=\"flexItem aboutWriting\">\r\n                    <p className=\"bp3-text-large\">\r\n                        Hello! I'm Cassidy, a Software Engineer in the making! \r\n                    </p>\r\n                    <p>\r\n                        I currently am attending Ontario Tech Univeristy pursuing a degree in the Bachelors of Engineering as a Software Engineer.\r\n                        I enjoy designing and developing web applications, problem solving, and making things on the Raspberry Pi to make my life simpler.\r\n                        I also enjoy many hobbies such as cooking, rock climbing, and have a green thumb for indoor gardening. \r\n                    </p>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { Card, Elevation, AnchorButton, Tag } from '@blueprintjs/core';\r\nimport AliceCarousel from 'react-alice-carousel';\r\nimport Projects from './projects.json';\r\n\r\nconst mapProjects = (projects) => {\r\n    return projects.map(proj => (\r\n        <Card interactive elevation={Elevation.TWO} className=\"projCard\" key={proj.title}>\r\n            <h3 className=\"bp3-heading\">{proj.title}</h3>\r\n            <AnchorButton text=\"Github\" rightIcon=\"git-repo\" className=\"projCardItem\" href={proj.link} target={\"_blank\"}/> \r\n            <Card className=\"aboutItem aboutWriting\">\r\n                <p className=\"bp3-text-large\">Description</p>\r\n                <p>{proj.description}</p>\r\n                <div>\r\n                    {mapProjecTags(proj.tags)}\r\n                </div>\r\n            </Card>\r\n        </Card>\r\n    ));\r\n}\r\n\r\nconst mapProjecTags = (tags) => {\r\n    return tags.map((tag, i) => (\r\n        <Tag round intent=\"primary\" key={tag+i} className=\"miniFlexItem\">{tag}</Tag>  \r\n    ));\r\n}\r\n\r\nfunction Project() {\r\n    return (\r\n        <div id=\"Projects\">\r\n            <div style={{fontSize:\"8rem\", textAlign:\"right\"}}>Projects.</div>\r\n            <AliceCarousel>\r\n                {mapProjects(Projects)}\r\n            </AliceCarousel>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Project;","import React from 'react';\r\nimport { Card, Elevation } from '@blueprintjs/core';\r\nimport AliceCarousel from 'react-alice-carousel'\r\nimport Jobs from './resume.json';\r\n\r\n\r\nconst mapJobs = (jobs) => {\r\n    return jobs.map(job => (\r\n        <div>\r\n        <Card interactive elevation={Elevation.TWO} className=\"flexItem jobCard\" key={job.title}>\r\n            <div>\r\n                <h3 className=\"bp3-heading\">{job.title}</h3>\r\n                <div>\r\n                    <h5 className=\"bp3-heading\">{job.company}</h5>\r\n                    <h5 className=\"bp3-heading\">{job.year}</h5>\r\n                </div>\r\n            </div>\r\n            <Card className=\"aboutItem aboutWriting\">\r\n                <p className=\"bp3-text-large\">Responsibilities</p>\r\n                {mapDescription(job.description)}\r\n            </Card>\r\n        </Card>\r\n        </div>\r\n    ));\r\n}\r\nconst mapDescription = (description) => {\r\n    let list = description.split(\"/\").map(item => (\r\n        <li>{item}</li>\r\n    ));\r\n    return (\r\n        <ul className=\".bp3-list\">\r\n            {list}\r\n        </ul>\r\n    )\r\n}\r\n\r\nfunction Resume() {\r\n    return (\r\n        <div id=\"Resume\">\r\n            <div style={{fontSize:\"6rem\"}}>Experience.</div>\r\n            <AliceCarousel>\r\n                {mapJobs(Jobs)}\r\n            </AliceCarousel>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Resume;","import React from 'react';\r\nimport { Card, AnchorButton } from \"@blueprintjs/core\";\r\n\r\nfunction Contact() {\r\n    return (\r\n        <Card id=\"Contact\">           \r\n            <h2 className=\"bp3-heading\">Connect with Me!</h2> \r\n            <div className=\"contactInner\">\r\n                <AnchorButton text=\"Github\" rightIcon=\"git-repo\" href={\"https://github.com/cassidylinhares\"} target={\"_blank\"}/> \r\n                <AnchorButton text=\"LinkedIn\" rightIcon=\"git-repo\" href={\"https://www.linkedin.com/in/cassidy-linhares/\"} target={\"_blank\"}/>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport About from \"./About\";\r\nimport Project from \"./Projects\";\r\nimport Resume from \"./Resume\";\r\nimport Contact from \"./Contact\";\r\nimport \"react-alice-carousel/lib/alice-carousel.css\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <About/>\r\n      <Resume/>\r\n      <Project/>\r\n      <Contact/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}